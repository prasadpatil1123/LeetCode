class Solution {
    public boolean isValid(String s) {
       //Create stack to store brackets
        Stack<Character> st = new Stack<>();
        
        // If the input string is null or empty, it's considered valid
        if (s == null || s.length() == 0) return true;

        // Iterate through each character in the input string
        for (int i = 0; i < s.length(); i++) {
            // If the current character is a closing parenthesis then Check if the stack is not empty          
            //and the top of the stack is an open parenthesis then pop that from stack.
            if (s.charAt(i) == ')') {
                if (!st.isEmpty() && st.peek() == '(') {
                    st.pop();
                } else {
                    // If the stack is empty or the top is not a matching open parenthesis, the string is invalid
                    return false;
                }
            }
            // For curly brace
            else if (s.charAt(i) == '}') {
                if (!st.isEmpty() && st.peek() == '{') {
                    st.pop();
                } else {
                    return false;
                }
            }
            // For square bracket
            else if (s.charAt(i) == ']') {
                if (!st.isEmpty() && st.peek() == '[') {
                    st.pop();
                } else {
                    return false;
                }
            }
            // If the current character is an open parenthesis, curly brace, or square bracket
            else {
                // Push it onto the stack
                st.push(s.charAt(i));
            }
        }
        
        // After iterating all brackets, if the stack is empty, the string is valid
        if (st.isEmpty()) {
            return true;
        } else {
            // If there are unmatched open symbols left in the stack, the string is invalid
            return false;
        }
    }
}
